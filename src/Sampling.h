#pragma once

#include "RNG.h"

#include <glm/glm.hpp>

#include <algorithm>

namespace Hikari
{

    void StratifiedSample1D(float* samples, unsigned int numSamples, RNG& rng, bool jitter);
    void StratifiedSample2D(glm::vec2* samples, unsigned int numSamplesX, unsigned int numSamplesY, RNG& rng, bool jitter);

    // Solves clumping problem with some unlucky samples generated by the StratifiedSampler.
    // PBRT Figure 7.20
    void LatinHypercube(float* samples, unsigned int numSamples, unsigned int numDimensions, RNG& rng);

    // This function keeps dimensions inside a sample intact i.e. at the end of the shuffle sample i
    // will have the same dimensions as it had in the beginning but its position most definitely will change.
    template <typename T>
    void Shuffle(T* samples, unsigned int count, unsigned int numDimensions, RNG& rng)
    {
        for (unsigned int i = 0; i < count; ++i)
        {
            // 1. Randomly pick an index
            unsigned int other = i + rng.UniformUInt32(count - i);
            for (unsigned int j = 0; j < numDimensions; ++j)
                // 2. And swap it with `i` in all dimensions
                std::swap(samples[numDimensions * i + j], samples[numDimensions * other + j]);
        }
    }

}   // namespace Hikari